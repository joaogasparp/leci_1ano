// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2021 17:37:23"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MuxDemo3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MuxDemo3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg LOGIC0;
reg LOGIC1;
reg S0;
reg S1;
reg S2;
reg S3;
// wires                                               
wire Y;

// assign statements (if any)                          
MuxDemo3 i1 (
// port map - connection between master ports and signals/registers   
	.LOGIC0(LOGIC0),
	.LOGIC1(LOGIC1),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.Y(Y)
);
initial 
begin 
#1000000 $finish;
end 

// LOGIC0
initial
begin
	LOGIC0 = 1'b0;
end 

// LOGIC1
initial
begin
	LOGIC1 = 1'b1;
end 

// S3
always
begin
	S3 = 1'b0;
	S3 = #500000 1'b1;
	#500000;
end 

// S2
always
begin
	S2 = 1'b0;
	S2 = #250000 1'b1;
	#250000;
end 

// S1
always
begin
	S1 = 1'b0;
	S1 = #125000 1'b1;
	#125000;
end 

// S0
always
begin
	S0 = 1'b0;
	S0 = #62500 1'b1;
	#62500;
end 
endmodule

