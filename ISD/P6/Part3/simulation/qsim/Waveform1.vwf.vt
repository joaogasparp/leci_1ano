// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2021 14:26:38"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          EncoderDemo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module EncoderDemo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg e_l;
reg x0;
reg x1;
reg x2;
reg x3;
reg x4;
reg x5;
reg x6;
reg x7;
// wires                                               
wire A;
wire B;
wire C;
wire os_l;

// assign statements (if any)                          
EncoderDemo i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.e_l(e_l),
	.os_l(os_l),
	.x0(x0),
	.x1(x1),
	.x2(x2),
	.x3(x3),
	.x4(x4),
	.x5(x5),
	.x6(x6),
	.x7(x7)
);
initial 
begin 
#1000000 $finish;
end 

// e_l
initial
begin
	e_l = 1'b0;
end 

// x0
initial
begin
	x0 = 1'b0;
	x0 = #10000 1'b1;
	x0 = #150000 1'b0;
end 

// x1
initial
begin
	x1 = 1'b0;
	x1 = #160000 1'b1;
	x1 = #80000 1'b0;
end 

// x2
initial
begin
	x2 = 1'b0;
end 

// x3
initial
begin
	x3 = 1'b0;
end 

// x4
initial
begin
	x4 = 1'b0;
end 

// x5
initial
begin
	x5 = 1'b0;
end 

// x6
initial
begin
	x6 = 1'b0;
end 

// x7
initial
begin
	x7 = 1'b0;
	x7 = #600000 1'b1;
	x7 = #140000 1'b0;
end 
endmodule

